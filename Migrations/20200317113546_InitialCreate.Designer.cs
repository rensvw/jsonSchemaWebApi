// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using jsonWebApiProject;

namespace jsonWebApiProject.Migrations
{
    [DbContext(typeof(JsonSchemaContext))]
    [Migration("20200317113546_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.2");

            modelBuilder.Entity("Children", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("ItemsId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .HasColumnType("TEXT");

                    b.Property<string>("Type")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ItemsId");

                    b.ToTable("Children");
                });

            modelBuilder.Entity("Default", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("ChildrenId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ChildrenId");

                    b.ToTable("Default");
                });

            modelBuilder.Entity("Dependencies", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Have_childrenId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Have_childrenId");

                    b.ToTable("Dependencies");
                });

            modelBuilder.Entity("DependenciesSchema", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("PropertiesId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Type")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("PropertiesId");

                    b.ToTable("DependenciesSchema");
                });

            modelBuilder.Entity("DependencyProperties", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("DetailsId")
                        .HasColumnType("TEXT");

                    b.Property<string>("TitleId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DetailsId");

                    b.HasIndex("TitleId");

                    b.ToTable("DependencyProperties");
                });

            modelBuilder.Entity("FormlyConfig", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("TemplateOptionsId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("TemplateOptionsId");

                    b.ToTable("FormlyConfig");
                });

            modelBuilder.Entity("HaveChildren", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("PropertiesId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("PropertiesId");

                    b.ToTable("HaveChildren");
                });

            modelBuilder.Entity("HaveProperties", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("childrenId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("childrenId");

                    b.ToTable("HaveProperties");
                });

            modelBuilder.Entity("JsonSchema", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("SchemaId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("SchemaId");

                    b.ToTable("JsonSchema");
                });

            modelBuilder.Entity("Option", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Label")
                        .HasColumnType("TEXT");

                    b.Property<string>("TemplateOptionsId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Value")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("TemplateOptionsId");

                    b.ToTable("Option");
                });

            modelBuilder.Entity("Properties", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("CountryId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Date_of_birthId")
                        .HasColumnType("TEXT");

                    b.Property<string>("EmailId")
                        .HasColumnType("TEXT");

                    b.Property<string>("FullnameId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Have_childrenId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("Date_of_birthId");

                    b.HasIndex("EmailId");

                    b.HasIndex("FullnameId");

                    b.HasIndex("Have_childrenId");

                    b.ToTable("Properties");
                });

            modelBuilder.Entity("Property", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .HasColumnType("TEXT");

                    b.Property<string>("Type")
                        .HasColumnType("TEXT");

                    b.Property<string>("WidgetId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("WidgetId");

                    b.ToTable("Property");
                });

            modelBuilder.Entity("Schema", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("DependenciesId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("PropertiesId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .HasColumnType("TEXT");

                    b.Property<string>("Type")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DependenciesId");

                    b.HasIndex("PropertiesId");

                    b.ToTable("Schema");
                });

            modelBuilder.Entity("TemplateOptions", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Placeholder")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Required")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("TemplateOptions");
                });

            modelBuilder.Entity("Widget", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("FormlyConfigId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("FormlyConfigId");

                    b.ToTable("Widget");
                });

            modelBuilder.Entity("Children", b =>
                {
                    b.HasOne("DependenciesSchema", "Items")
                        .WithMany()
                        .HasForeignKey("ItemsId");
                });

            modelBuilder.Entity("Default", b =>
                {
                    b.HasOne("Children", null)
                        .WithMany("Default")
                        .HasForeignKey("ChildrenId");
                });

            modelBuilder.Entity("Dependencies", b =>
                {
                    b.HasOne("HaveChildren", "Have_children")
                        .WithMany()
                        .HasForeignKey("Have_childrenId");
                });

            modelBuilder.Entity("DependenciesSchema", b =>
                {
                    b.HasOne("DependencyProperties", "Properties")
                        .WithMany()
                        .HasForeignKey("PropertiesId");
                });

            modelBuilder.Entity("DependencyProperties", b =>
                {
                    b.HasOne("Property", "Details")
                        .WithMany()
                        .HasForeignKey("DetailsId");

                    b.HasOne("Property", "Title")
                        .WithMany()
                        .HasForeignKey("TitleId");
                });

            modelBuilder.Entity("FormlyConfig", b =>
                {
                    b.HasOne("TemplateOptions", "TemplateOptions")
                        .WithMany()
                        .HasForeignKey("TemplateOptionsId");
                });

            modelBuilder.Entity("HaveChildren", b =>
                {
                    b.HasOne("HaveProperties", "Properties")
                        .WithMany()
                        .HasForeignKey("PropertiesId");
                });

            modelBuilder.Entity("HaveProperties", b =>
                {
                    b.HasOne("Children", "children")
                        .WithMany()
                        .HasForeignKey("childrenId");
                });

            modelBuilder.Entity("JsonSchema", b =>
                {
                    b.HasOne("Schema", "Schema")
                        .WithMany()
                        .HasForeignKey("SchemaId");
                });

            modelBuilder.Entity("Option", b =>
                {
                    b.HasOne("TemplateOptions", null)
                        .WithMany("Options")
                        .HasForeignKey("TemplateOptionsId");
                });

            modelBuilder.Entity("Properties", b =>
                {
                    b.HasOne("Property", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId");

                    b.HasOne("Property", "Date_of_birth")
                        .WithMany()
                        .HasForeignKey("Date_of_birthId");

                    b.HasOne("Property", "Email")
                        .WithMany()
                        .HasForeignKey("EmailId");

                    b.HasOne("Property", "Fullname")
                        .WithMany()
                        .HasForeignKey("FullnameId");

                    b.HasOne("Property", "Have_children")
                        .WithMany()
                        .HasForeignKey("Have_childrenId");
                });

            modelBuilder.Entity("Property", b =>
                {
                    b.HasOne("Widget", "Widget")
                        .WithMany()
                        .HasForeignKey("WidgetId");
                });

            modelBuilder.Entity("Schema", b =>
                {
                    b.HasOne("Dependencies", "Dependencies")
                        .WithMany()
                        .HasForeignKey("DependenciesId");

                    b.HasOne("Properties", "Properties")
                        .WithMany()
                        .HasForeignKey("PropertiesId");
                });

            modelBuilder.Entity("Widget", b =>
                {
                    b.HasOne("FormlyConfig", "FormlyConfig")
                        .WithMany()
                        .HasForeignKey("FormlyConfigId");
                });
#pragma warning restore 612, 618
        }
    }
}
